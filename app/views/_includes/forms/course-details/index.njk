
{% set isPrimary = record.courseDetails.phase == "Primary" %}

{% set phase = "Primary" if isPrimary else "Secondary" %}

{% set primarySubjectsToRemove = [
    "Primary teaching",
    "Specialist teaching (primary with mathematics)"
  ]
%}

{% set subjectSpecialisms = data.ittSubjects | removeArrayItems(primarySubjectsToRemove) %}

{# Make autocomplete array so we can have subject category as a hint #}
{% set subjectsForAutocomplete = [] %}

{% for subject in subjectSpecialisms %}
  {% set allocationSubject = subject | subjectToAllocationSubject %}
  {% set subjectsForAutocomplete = subjectsForAutocomplete | push({
    name: subject,
    value: subject,
    hint: allocationSubject if subject != allocationSubject,
    synonyms: [allocationSubject]
  }) %}
{% endfor %}

{# Autocompletes for subjects 2 and 3 #}
{% set multipleSubjectsHtml %}
  
  {% if not isPrimary %}
    <p class="govuk-body">The first subject is the main one. It represents the bursary or scholarship available if applicable.</p>
  {% endif %}

  {% for item in [2,3] %}

    {# 'second' or 'third' #}
    {% set ordinal = item | getOrdinalName %}

    {% set label %}
      {# Show '(optional)' if it’s a secondary course or if it’s primary but the third subject #}
      {{ ordinal | sentenceCase }} subject {{-  " (optional)" if (not isPrimary) or (ordinal == "third") }}
    {% endset %}

    {{ appAutocompleteFromSelect({
      label: {
        text: label,
        classes: "govuk-label--s"
      },
      hint: {
        text: 'Search for the closest matching subject'
      },
      id: 'subject_' + (loop.index + 1),
      classes: "govuk-!-width-two-thirds",
      name: "record[courseDetails][subjects][" + ordinal + "]",
      items: subjectSpecialisms | toSelectItems,
      value: record.courseDetails.subjects[ordinal],
      autocompleteOptions: {
        autoselect: true,
        showAllValues: false,
        allowEmpty: true,
        values: subjectsForAutocomplete
      }
    }
    ) }}
  {% endfor %}
{% endset %}


{% include "_includes/trainee-name-caption.njk" %}
<h1 class="govuk-heading-l">
  {{pageHeading}}
</h1>

{% set primarySubjects = [] %}

{% set firstSubject = record.courseDetails.subjects.first %}
{% set secondSubject = record.courseDetails.subjects.second %}
{% set thirdSubject = record.courseDetails.subjects.third %}

{% set namedSubjects = [
  "English studies",
  "Geography",
  "Modern languages",
  "Physical education",
  "General sciences"
] %}

{% set primarySubjects = [
  {
    text: "Primary",
    checked: true if firstSubject == "Primary teaching" and not secondSubject and not thirdSubject
  },
  {
    text: "Primary with English",
    checked: true if firstSubject == "Primary teaching" and secondSubject == "English studies" and not thirdSubject
  },
  {
    text: "Primary with geography and history",
    checked: true if firstSubject == "Primary teaching" and secondSubject == "Geography" and thirdSubject == "History"
  },
  {
    text: "Primary with mathematics",
    checked: true if firstSubject == "Specialist teaching (primary with mathematics)" and not secondSubject and not thirdSubject
  },
  {
    text: "Primary with modern languages",
    checked: true if firstSubject == "Primary teaching" and secondSubject == "Modern languages" and not thirdSubject
  },
  {
    text: "Primary with physical education",
    checked: true if firstSubject == "Primary teaching" and secondSubject == "Physical education" and not thirdSubject
  },
  {
    text: "Primary with science",
    checked: true if firstSubject == "Primary teaching" and secondSubject == "General sciences" and not thirdSubject
  },
  {
    divider: "or"
  },
  {
    text: "Primary with another subject",
    checked: true if firstSubject == "Primary teaching" and secondSubject and not (namedSubjects | includes(secondSubject) ),
    conditional: {
      html: multipleSubjectsHtml
    }
  }
] %}

{# Show subject for Primary or Secondary #}
{% if isPrimary %}

  {{ govukRadios({
    fieldset: {
      legend: {
        text: "Subject",
        isPageHeading: false,
        classes: "govuk-fieldset__legend--s"
      }
    },
    items: primarySubjects
  } | decorateAttributes(record, "record.courseDetails.primarySubjectsCombined")) }}

{% else %}
  {% set hasMultipleSubjects = record.courseDetails.subjects | length > 1 %}

  {{ appAutocompleteFromSelect({
    label: {
      text: "Subject",
      classes: "govuk-label--s"
    },
    hint: {
      text: 'Search for the closest matching subject'
    },
    id: 'subject_1',
    classes: "govuk-!-width-two-thirds",
    name: "record[courseDetails][subjects][first]",
    items: subjectSpecialisms | toSelectItems,
    value: record.courseDetails.subjects.first,
    autocompleteOptions: {
      autoselect: true,
      showAllValues: false,
      values: subjectsForAutocomplete
    }
  }
  ) }}

  {{ govukDetails({
    summaryText: "Add additional subjects",
    html: multipleSubjectsHtml,
    open: true if hasMultipleSubjects
  }) }}
{% endif %}

{# Age ranges vary depending on phase #}
{% set commonAgeRanges = data.trainingRouteData.phases[phase].ageRanges %}
{% set otherAgeRanges = data.trainingRouteData.phases[phase].otherAgeRanges %}

{# Prefil existing answer #}
{% set ageRangeExistingValue = record.courseDetails.ageRange %}

{% if ageRangeExistingValue in commonAgeRanges or ageRangeExistingValue not in otherAgeRanges %}
  {% set ageRangeExistingValue = undefined %}
{% endif %}

{% set ageRangeSelect %}

  {# Using a select as autocomplete has poor usability for this type of data #}
  {% set selectItems = [] %}
  {% set selectItems = selectItems | push({
    vale: "",
    text: "",
    selected: true if ageRangeExistingValue not in otherAgeRanges
  }) %}

  {% for item in otherAgeRanges %}
    {% set selectItems = selectItems | push({
      text: item,
      selected: true if ageRangeExistingValue == item
    }) %}
  {% endfor %}

  {{ govukSelect({
    classes: "",
    label: {
      text: "Select the age range",
      classes: ""
    },
    items: selectItems,
    value: ageRangeExistingValue
  } | decorateAttributes(record, "record.courseDetails.ageRangeOther")) }}
{% endset %}

{% set ageRangeRadios = [] %}

{% for ageRange in commonAgeRanges %}
  {% set ageRangeRadios = ageRangeRadios | push({
    text: ageRange
  }) %}
{% endfor %}

{% set ageRangeRadios = ageRangeRadios | push({
    divider: 'or'
  }) %}

{% set ageRangeRadios = ageRangeRadios | push({
  text: "Other age range",
  checked: 'checked' if ageRangeExistingValue,
  conditional: {
    html: ageRangeSelect
  }
}) %}

{{ govukRadios({
  fieldset: {
    legend: {
      text: "Age range",
      classes: "govuk-fieldset__legend--s"
    }
  },
  items: ageRangeRadios
} | decorateAttributes(record, "record.courseDetails.ageRange")) }}


{% if record | requiresField("studyMode") %}

  {{ govukRadios({
    fieldset: {
      legend: {
        text: "Full time or part time?",
        classes: "govuk-fieldset__legend--s"
      }
    },
    items: [
      {
        text: "Full time"
      },
      {
        text: "Part time"
      }
    ]
  } | decorateAttributes(record, "record.courseDetails.studyMode")) }}

{% endif %}


{% if record | requiresField("apprenticeshipStartDate") %}

  {% set apprenticeshipStartDateArray = record.courseDetails.startDate | toDateArray %}

  {{ govukDateInput({
    id: "apprenticeship-start-date",
    namePrefix: "record[courseDetails][apprenticeshipStartDate]",
    fieldset: {
      legend: {
        text: "Apprenticeship start date",
        classes: "govuk-fieldset__legend--s"
      }
    },
    hint: {
      text: "For example, " + "" | today | toDateArray | spaceSeparate
    },
    items: [
        {
          name: "day",
          classes: "govuk-input--width-2",
          value: apprenticeshipStartDateArray["0"]
        },
        {
          name: "month",
          classes: "govuk-input--width-2",
          value: apprenticeshipStartDateArray["1"]
        },
        {
          name: "year",
          classes: "govuk-input--width-4",
          value: apprenticeshipStartDateArray["2"]
        }
      ]
  }) }}

{% endif %}

{% set programmeStartDateArray = record.courseDetails.startDate | toDateArray %}

{% set startDateHint = "For example, " + "" | today | toDateArray | spaceSeparate %}

{{ govukDateInput({
  id: "programme-start-date",
  namePrefix: "record[courseDetails][startDate]",
  fieldset: {
    legend: {
      text: "ITT start date",
      classes: "govuk-fieldset__legend--s"
    }
  },
  hint: {
    html: startDateHint
  },
  items: [
      {
        name: "day",
        classes: "govuk-input--width-2",
        value: programmeStartDateArray["0"]
      },
      {
        name: "month",
        classes: "govuk-input--width-2",
        value: programmeStartDateArray["1"]
      },
      {
        name: "year",
        classes: "govuk-input--width-4",
        value: programmeStartDateArray["2"]
      }
    ]
}) }}

{% set programmeEndDateArray = record.courseDetails.endDate | toDateArray %}

{% set endDateHint = "For example, " + "" | today | moment('add', 1, 'years') | toDateArray | spaceSeparate %}

{{ govukDateInput({
  id: "programme-end-date",
  namePrefix: "record[courseDetails][endDate]",
  fieldset: {
    legend: {
      text: "Expected end date",
      classes: "govuk-fieldset__legend--s"
    }
  },
  hint: {
    html: endDateHint
  },
  items: [
      {
        name: "day",
        classes: "govuk-input--width-2",
        value: programmeEndDateArray["0"]
      },
      {
        name: "month",
        classes: "govuk-input--width-2",
        value: programmeEndDateArray["1"]
      },
      {
        name: "year",
        classes: "govuk-input--width-4",
        value: programmeEndDateArray["2"]
      }
    ]
}) }}


{{ govukButton({
  text: "Continue"
}) }}







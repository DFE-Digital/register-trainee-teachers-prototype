
{# Prepend each autocomplete option with 'data-' #}
{% set attributes = {
  "data-autoselect": params.autocompleteOptions.autoselect,
  "data-min-length": params.autocompleteOptions.minLength,
  "data-placeholder": params.autocompleteOptions.placeholder,
  "data-showAllValues": params.autocompleteOptions.showAllValues,
  "data-show-no-options-found": params.autocompleteOptions['show-no-options-found'],
  "data-autocomplete-values": params.values | dump
} | deleteBlankAttributes %}

{# Push data attributes back in to params #}
{% set params = params | setAttribute("attributes", attributes) %}

{% set params = params | deleteAttribute("autocompleteOptions") %}
  

<div data-module="app-autocomplete" class="{{params.parentClasses}}">

  {% if autocompleteType == "input" %}

    {% from "govuk/components/input/macro.njk" import govukInput %}
    {{ govukInput(params)}}
    {# Container is where the autocomplete will get positioned
    our javascript init code will later move this within the input form-group #}
    <div id="{{params.id}}-autocomplete-container"></div>

  {% elseif autocompleteType == "select" %}

    {% from "govuk/components/select/macro.njk" import govukSelect %}

    {# Prepare a default first item #}
    {% set defaultSelected = true %}

    {# Check if value exists in items - if so, we shouldn't have a default selected item #}
    {% if params.value %}
      {% if params.value in params.items %}
        {% set defaultSelected = false %}
      {% endif %}
    {% endif %}

    {# First item should either be an empty row or an instruction #}
    {% if params.allowEmpty %}
      {% set firstItem = {
        value: "",
        text: "",
        selected: defaultSelected
      } %}
    {% else %}
      {% set firstItem = {
        value: "",
        text: "Please select",
        disabled: true,
        selected: defaultSelected
      } %}
    {% endif %}

    {% set selectItems = [firstItem] %}

    {# Support items in a few different formats #}
    {% for item in params.items %}

      {# [text, value] eg ['United Kingdom', 'GB'] #}
      {% if item | isArray %}
        {% set selectItems = selectItems | push({
          value: item[1],
          text: item[0],
          selected: params.value == item[1]
        }) %}

      {# This is the same format as the govukSelect normally accepts #}
      {# { text: 'United Kingdom', value: 'GB' }#}
      {% elseif item | isObject %}
        {# {{item | log}} #}
        {% set newObj = item | setAttribute('selected', params.value == item.value) %}
        {% set selectItems = selectItems | push(newObj) %}

      {# Use same text for value and text #}
      {% else %}
        {% set selectItems = selectItems | push({
          value: item,
          text: item,
          selected: params.value == item
        }) %}
      {% endif %}
    {% endfor %}

    {% set params = params | setAttribute("items", selectItems) %}
    {{ govukSelect(params) }}

  {% endif %}

 </div>
